//Use RequestDispatcher in order to call another file such as a jsp or servlet
//Dont forget to also forward the request and response objects

RequestDispatcher rd = request.getRequestDispatcher("index.jsp");  

rd.forward(request, response);

//Alternative if you have your JSP inside a folder within WEB-INF

RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/views/test.jsp");

-----------------------------------------------------------------------------------------
//Being able to store objects and values within the request object
/*Remember that the request object has to be forwarded to the JSP (through RequestDispatcher)
in order for the JSP to be able to access the attributes of that request
*/

//Stores an ArrayList named "courses" in the request object. To retrieve it make sure to use its key "courseList"

request.setAttribute("courseList", courses);

//In a scriplet you are able to retrieve these objects and variables through the use of the request object
//Make sure to just convert what is given by the .getAttribute() method to the right type

ArrayList<Course> list = (ArrayList<Course>) request.getAttribute("courseList");

------------------------------------------------------------------------------------------
//Being able to store objects and values within the session object
/*Remember that the session has a higher scope meaning that all JSPs
  and servlets share the same session
*/

//Create the session object that will be used:

HttpSession session = request.getSession(true);

//Stores an ArrayList named "courses" in the session object. To retrieve it make sure to use its key "courseList"

session.setAttribute("courseList", courses);

//In a scriplet you are able to retrieve these objects and variables through the use of the request object
//Make sure to just convert what is given by the .getAttribute() method to the right type

ArrayList<Course> list = (ArrayList<Course>) session.getAttribute("courseList");

----------------------------------------------------------------------------------------------------------------------------------

//You are able to use cookies in order to keep track of values between JSPs and Servlets
//Defining and adding a cookie object to the response object of the servlet

Cookie testCookie = new Cookie("favoriteCookie","NewCookie");
response.addCookie(testCookie);

//You are able to then retrieve the value of the cookie through the JSP
//Use expression language to access the implicit cookie object

<h1>Here is the Cookie value: ${cookie.favoriteCookie.value }</h1>

//Remember that you are able to access the cookie object from any JSP thus having a scope similar to session

----------------------------------------------------------------------------------------------------------------------
//Template for using a Servlet as a controller. 
//The switch statement dictates to which page you will be directed to.
//Make sure to use the correct reference when trying to use the controller.

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/* This servlet is set to respond to requests with the URL pattern "/HomeServlet or 
 * "/HomeServlet followed by a slash and zero or more characters. */
@WebServlet({"/HomeServlet", "/HomeServlet/*"})
public class HomeServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		/* The action string will be assigned the URL route and determine which 
		 * servlet method gets called by using a switch block. */
		String action = null;
		String servletPath = request.getServletPath();
		String pathInfo = request.getPathInfo();
		
		/* If there are no characters after the servlet path (pathInfo will be 
		 * null) or if the servlet path is followed by a single "/" then the action 
		 * string will be assigned only the servlet path. If there is a slash 
		 * followed by any characters, then the action string will be assigned the 
		 * servlet path plus the additional path information. */
		if (pathInfo == null || pathInfo.equals("/")) {
			action = servletPath;
		} else {
			action = servletPath + pathInfo;
		}
		// Verify the action string by printing to the console
		System.out.println(action);
		
		try
		{
			switch(action) {
				case "/HomeServlet":
					showWelcome(request, response);
					break;
				case "/HomeServlet/securePage":
					showSecure(request, response);
					break;
				default:
					showWelcome(request, response);
					break;
			}
		}
		catch(IOException e)
		{
			System.out.println(e.getMessage());
		}
	}
	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		doGet(request, response);
	}
	
	private void showWelcome(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/views/Welcome.jsp");
		rd.forward(request, response);
	}
	private void showSecure(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/views/SecurePage.jsp");
		rd.forward(request, response);
	}
	
}
--------------------------------------------------------------------------------------------------------
//You can call the controller described previously by using this code in your jsp links or forms
//Outlines which path will be called, the controller handles the rest.

<a href="${pageContext.request.contextPath}/HomeServlet/securePage">Secure Page</a>


